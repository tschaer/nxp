// mastercomm.nxc
// 08.02.2012 T Schaer
// Master communication code

// ----- Variables
int CommState = 0;
const string Slave = SLAVE;

unsigned int BadResponses, BadStatuses, Timeouts, Cycles;

// Protocol timeouts
TimerObject RespMsgBeginTimer;
TimerObject RespMsgFinishTimer;
TimerObject StatusMsgBeginTimer;
TimerObject StatusMsgFinishTimer;

// ----- Code
void CommInit() {
  // Set up High Speed port
  SetSensorType(IN_4, SENSOR_TYPE_HIGHSPEED);
  SetHSState(HS_INITIALISE);
  SetHSFlags(HS_UPDATE);
  
  // start with empty input buffer
  SetHSInputBufferInPtr(0);
  SetHSInputBufferOutPtr(0);
  
  // make sure everything gets turned on okay
  Wait(5);
  
  // Set up timeouts
  RespMsgBeginTimer.Timeout = 1000;
  RespMsgFinishTimer.Timeout = 1000;
  StatusMsgBeginTimer.Timeout = 1000;
  StatusMsgFinishTimer.Timeout = 1000;

}

void Comm() {
  bool Done = false;
  unsigned char MsgLen, StatusMsgLen;
  string RequestMessage, ResponseMessage;
  string CommandMessage, StatusMessage;
  string sTemp;
  TickTock CommTaskElapsed;
  
  while(Done == false) {
    switch(CommState) {
      case -1:
        // State -1: Communication finished
        Cycles++;
        Tock(CommTaskElapsed);
        TextOut(0, LCD_LINE7, "Elapsed : " + NumToStr(Elapsed(CommTaskElapsed)) + "    ");
        Done = true;
        CommState = 0;
        break;
      case 0:
        // State 0: Initialize
        Tick(CommTaskElapsed);
        CommTask_resetAll(PDI_C);
        CommTask_resetAll(PDO_C);
         // Get PDO
         Acquire(mxPDO);
         PDO_C = PDO;
         Release(mxPDO);
        // Generate messages
        CommandMessage = CommTask_serializeJson(Slave, PDO_C);
        RequestMessage = ReqMessage(Slave, StrLen(CommandMessage), 0);
        // Send Request Message
        SetHSInputBufferInPtr(0);
        SendRS485String(RequestMessage);
        CommState = 1;
        break;
      case 1:
        // State 1: send Request Message
        if (SendingDone()) {
          StartTimer(RespMsgBeginTimer);
          CommState = 2;
        }
        break;
      case 2:
        // State 2: wait for Response Message
        if (HSInputBufferInPtr() > 0) {
          StartTimer(RespMsgFinishTimer);
          CommState = 3;
        } else if (CheckTimer(RespMsgBeginTimer) == true) {
          TextOut(0, LCD_LINE8, "Timeout State 2");
          CommState = -1;
        } else {
          Wait(5);
        }
        break;
      case 3:
        // State 3: receive Response Message
        MsgLen = HSInputBufferInPtr();
        if (MsgLen >= RESPMSGLEN+1) {
          GetHSInputBuffer(0, RESPMSGLEN+1, ResponseMessage);
          SetHSInputBufferInPtr(0);
          if (CommTask_parseJson(ResponseMessage, "Response", PDI_C) == true){
            sTemp = CommTask_lookup("len", "Response", PDI_C);
            StatusMsgLen = StrToNum(sTemp);
            SendRS485String(CommandMessage);
            CommState = 4;
          } else {
            BadResponses++;
            TextOut(0, LCD_LINE8, "Bad Response");
            CommState = -1;
          }
        } else if (CheckTimer(RespMsgFinishTimer) == true) {
          Timeouts++;
          TextOut(0, LCD_LINE8, "Timeout State 3");
          CommState = -1;
        } 
        break;
      case 4:
        // State 4: send Command Message
        if (SendingDone()) {
          StartTimer(StatusMsgBeginTimer);
          CommState = 5;
        } 
        break;
      case 5:
        // State 5: wait for Status Message
        if (HSInputBufferInPtr() > 0) {
          StartTimer(StatusMsgFinishTimer);
          CommState = 6;
        } else if (CheckTimer(StatusMsgBeginTimer) == true) {
          Timeouts++;
          TextOut(0, LCD_LINE8, "Timeout State 5");
          CommState = -1;
        } else {
          Wait(5);
        }
        break;
      case 6:
        // State 6: receive Status Message
        MsgLen = HSInputBufferInPtr();
        if (MsgLen >= StatusMsgLen + 1) {
          GetHSInputBuffer(0, MsgLen, StatusMessage);
          CommTask_resetAll(PDI_C);
          if (CommTask_parseJson(StatusMessage, Slave, PDI_C) == false ) {
            BadStatuses++;
            TextOut(0, LCD_LINE8, "Bad Status Msg");
          }
          Acquire(mxPDI);
          CommTask_resetAll(PDI);
          PDI = PDI_C;
          Release(mxPDI);
          CommState = -1;     
        } else if (CheckTimer(StatusMsgFinishTimer) == true) {
          Timeouts++;
          TextOut(0, LCD_LINE8, "Timeout State 6");
          CommState = -1;
        }
        break;
      default:
        // you should never get here but...
        TextOut(0, LCD_LINE8, "w00t! Error!       ");
        Wait(10000);
        CommState = -1;
    }
  }
}

