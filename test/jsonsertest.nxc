// jsonsertest.nxc
// 08.02.2012 T Schaer
// Test jsonserialize.nxc

#include "../src/dictionary.nxc"
#include "../src/jsonparse.nxc"
#include "../src/jsonserialize.nxc"

#define NOFNODES 1
NewDict(PD, NOFNODES);
NewDictApi(Test);
NewJsonParser(Test);
NewJsonSerializer(Test);

task main() {
  
  string Node = "Slave1";
  
  string Object1 = "{\"a\":1}";
  string Object2 = "{\"a\":-1,\"b\":2.5}";
  string Object3 = "{\"a\":\"one\",\"b\":\"two\"}";
  string Object4 = "{}";

  bool Status;
  string sValue, sSerial;
  
  TextOut(0, LCD_LINE1, "JSON serialize");
  Wait(3000);
  
  // Test 1
  TextOut(0, LCD_LINE2, Object1);
  Status = Test_parseJson(Object1, Node, PD);
  sValue = Test_lookup("a", Node, PD);
  TextOut(0, LCD_LINE3, "a: " + sValue);
  sSerial = Test_serializeJson(Node, PD);
  TextOut(0, LCD_LINE4, sSerial);
  Wait(5000);
  
  ClearScreen();
  Test_resetAll(PD);
  
  // Test 2
  TextOut(0, LCD_LINE2, Object2);
  Status = Test_parseJson(Object2, Node, PD);
  TextOut(0, LCD_LINE3, "a: " + Test_lookup("a", Node, PD));
  TextOut(0, LCD_LINE4, "b: " + Test_lookup("b", Node, PD));
  sSerial = Test_serializeJson(Node, PD);
  TextOut(0, LCD_LINE5, sSerial);
  Wait(5000);

  ClearScreen();
  Test_resetAll(PD);

  // Test 3
  TextOut(0, LCD_LINE2, Object3);
  Status = Test_parseJson(Object3, Node, PD);
  TextOut(0, LCD_LINE3, "a: " + Test_lookup("a", Node, PD));
  TextOut(0, LCD_LINE4, "b: " + Test_lookup("b", Node, PD));
  sSerial = Test_serializeJson(Node, PD);
  TextOut(0, LCD_LINE5, sSerial);
  Wait(5000);

  ClearScreen();
  Test_resetAll(PD);

  // Test 4
  TextOut(0, LCD_LINE2, Object4);
  Status = Test_parseJson(Object4, Node, PD);
  sSerial = Test_serializeJson(Node, PD);
  TextOut(0, LCD_LINE5, sSerial);
  Wait(5000);
  
}